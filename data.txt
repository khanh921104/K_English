CREATE DATABASE IF NOT EXISTS web_hoc_tieng_anh;
USE web_hoc_tieng_anh;

-- Bảng khách hàng
CREATE TABLE khach_hang (
    ma_kh INT AUTO_INCREMENT PRIMARY KEY,
    ho_ten VARCHAR(100),
    email VARCHAR(100),
    so_dien_thoai VARCHAR(20),
    ngay_dang_ky DATE DEFAULT CURRENT_DATE
);


-- Bảng khóa học
CREATE TABLE khoa_hoc (
    ma_khoa INT AUTO_INCREMENT PRIMARY KEY,
    ten_khoa VARCHAR(100),
    mo_ta TEXT,
    cap_do ENUM('Sơ cấp', 'Trung cấp', 'Cao cấp'),
    gia DECIMAL(10,2),
    so_luong_dang_ky INT DEFAULT 0,
    ma_gv INT,
    FOREIGN KEY (ma_gv) REFERENCES giao_vien(ma_gv)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);

CREATE TABLE buoi_hoc (
    ma_buoi INT AUTO_INCREMENT PRIMARY KEY,
    ten_buoi VARCHAR(100),
    noi_dung TEXT,
    ngay_hoc DATE,
    ma_khoa INT,
    FOREIGN KEY (ma_khoa) REFERENCES khoa_hoc(ma_khoa)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE video_bai_giang (
    ma_video INT AUTO_INCREMENT PRIMARY KEY,
    ten_video VARCHAR(255),
    duong_dan_video VARCHAR(500),
    mo_ta TEXT,
    thoi_luong INT, -- tính bằng phút
    ma_buoi INT,
    FOREIGN KEY (ma_buoi) REFERENCES buoi_hoc(ma_buoi)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


-- Bảng đăng ký khóa học
CREATE TABLE dang_ky (
    ma_kh INT,
    ma_khoa INT,
    ngay_dang_ky DATE DEFAULT CURRENT_DATE,
    trang_thai ENUM('enrolled', 'completed') DEFAULT 'enrolled',
    PRIMARY KEY (ma_kh, ma_khoa),
    FOREIGN KEY (ma_kh) REFERENCES khach_hang(ma_kh) ON DELETE CASCADE,
    FOREIGN KEY (ma_khoa) REFERENCES khoa_hoc(ma_khoa) ON DELETE CASCADE
);

CREATE TABLE phan_quyen (
    ma_quyen INT AUTO_INCREMENT PRIMARY KEY,
    ten_quyen VARCHAR(50) UNIQUE -- Ví dụ: 'admin', 'giao_vien', 'hoc_vien'
);

CREATE TABLE tai_khoan (
    ten_dang_nhap VARCHAR(50) PRIMARY UNIQUE,
    mat_khau VARCHAR(100),
    ma_kh INT NOT NULL,
    ma_quyen INT,
    FOREIGN KEY (ma_quyen) REFERENCES phan_quyen(ma_quyen)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);

CREATE TABLE giao_vien_tao_khoa_hoc  (
    ma_kh INT NOT NULL,         --  ( giáo viên)
    ma_khoa INT NOT NULL,       -- Mã khóa học
    ngay_tao DATE DEFAULT CURRENT_DATE, -- Ngày tạo khóa học (tuỳ chọn)
    PRIMARY KEY (ma_kh, ma_khoa),
    FOREIGN KEY (ma_kh) REFERENCES khach_hang(ma_kh)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (ma_khoa) REFERENCES khoa_hoc(ma_khoa)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE bai_tap (
    ma_bai INT AUTO_INCREMENT PRIMARY KEY,
    ten_bai VARCHAR(255),
    noi_dung TEXT,
    ma_buoi INT,
    FOREIGN KEY (ma_buoi) REFERENCES buoi_hoc(ma_buoi)
);

CREATE TABLE lam_bai_tap( 
    ma_bai INT,
    ma_kh INT,
    dap_an TEXT,
    diem FLOAT,
    thoi_gian_nop DATETIME DEFAULT CURRENT_TIMESTAMP,
    trang_thai ENUM('Chưa hoàn thành', 'Hoàn thành') DEFAULT 'Chưa hoàn thành',
    PRIMARY KEY (ma_bai, ma_kh),
    FOREIGN KEY (ma_bai) REFERENCES bai_tap(ma_bai)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (ma_kh) REFERENCES khach_hang(ma_kh)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE lich_su_hoc (
    ma_kh INT,                            -- Mã người học
    ma_video INT,                         -- Video học
    thoi_gian_xem DATETIME DEFAULT CURRENT_TIMESTAMP, -- Lần đầu xem
    so_phut_da_xem INT DEFAULT 0,         -- Số phút đã xem
    da_hoan_thanh BOOLEAN DEFAULT FALSE,  -- Đánh dấu hoàn thành video
    lam_xong_bai_tap BOOLEAN DEFAULT FALSE, -- Nếu làm hết bài tập thì được tính hoàn thành buổi học
    PRIMARY KEY (ma_kh, ma_video),
    FOREIGN KEY (ma_kh) REFERENCES khach_hang(ma_kh) ON DELETE CASCADE,
    FOREIGN KEY (ma_video) REFERENCES video_bai_giang(ma_video) ON DELETE CASCADE
);



DELIMITER $$

CREATE TRIGGER cap_nhat_trang_thai_buoi
BEFORE UPDATE ON lich_su_hoc
FOR EACH ROW
BEGIN
    IF (NEW.da_hoan_thanh_video = TRUE OR NEW.lam_xong_bai_tap = TRUE) THEN
        SET NEW.da_hoan_thanh_buoi = TRUE;
    END IF;
END$$

DELIMITER ;


DELIMITER $$

CREATE TRIGGER after_insert_dang_ky
AFTER INSERT ON dang_ky
FOR EACH ROW
BEGIN
    UPDATE khoa_hoc
    SET so_luong_dang_ky = so_luong_dang_ky + 1
    WHERE ma_khoa = NEW.ma_khoa;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER after_delete_dang_ky
AFTER DELETE ON dang_ky
FOR EACH ROW
BEGIN
    UPDATE khoa_hoc
    SET so_luong_dang_ky = so_luong_dang_ky - 1
    WHERE ma_khoa = OLD.ma_khoa;
END$$

DELIMITER ;

